<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// _________________________________
// Creacion de enums 

// enum para las diferentes facciones
enum faction {
    nonInit,
    factionA,
    factionB,
    factionC
    }
    
// enum para los estados posibles de la carta en juego
enum state {
    nonInit,
    hand,
    board,
    banished,
    maze
    }
    
// _________________________________
// Atributos

cardID = -1;
cardName = "NonInitialized";
owner = -1;

costA = -1;
costB = -1;

hp = -1;
dmg = -1;
range = -1;

cardFaction = faction.nonInit;
cardState = state.nonInit;
selected = 0;



mask_index=spr_cardFront;

//Pasar por encima
hover=0;
depth=-ds_list_size(obj_player.mano);


//Debugeo
draw_set_halign(fa_center);
draw_set_valign(fa_center);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (cardState!= state.nonInit){
        //Posiciones según la posicion de la carta en la mano
    var cardHover=-1;
    with(obj_card){
        if(hover==1){
            cardHover=id;
        }
    }
    
    
    /// ¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡cambiados todos los OBJ_PLAYER por OWNER!!!!!!!!!!!!!!!
    
    /// ¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡cambiados todos los instance_number(obj_card) por ds_list_size(obj_game.players[obj_game.player].mano)!!!!!!!!!!!!!!!
    
    if(cardHover==-1){
    x=display_get_gui_width()*(((ds_list_find_index(owner.mano,id))+6)*(1/(ds_list_size(owner.mano)+11)));
    y=display_get_gui_height()-sprite_get_height(spr_cardFront)/4-0.2*sprite_get_height(spr_cardFront)*hover;
    }
    else{
        var a=ds_list_find_index(owner.mano,id);
        var b=ds_list_find_index(owner.mano,cardHover);
        if(a&lt;b){
            x=display_get_gui_width()*(((ds_list_find_index(owner.mano,id))+6)*(1/(ds_list_size(owner.mano)+11)))-sprite_get_width(spr_cardFront)/2;
            y=display_get_gui_height()-sprite_get_height(spr_cardFront)/4-0.2*sprite_get_height(spr_cardFront)*hover;
        }
        else if(a=b){
            x=display_get_gui_width()*(((ds_list_find_index(owner.mano,id))+6)*(1/(ds_list_size(owner.mano)+11)));
            y=display_get_gui_height()-sprite_get_height(spr_cardFront)/4-0.2*sprite_get_height(spr_cardFront)*hover;
        }
        else{
            x=display_get_gui_width()*(((ds_list_find_index(owner.mano,id))+6)*(1/(ds_list_size(owner.mano)+11)))+sprite_get_width(spr_cardFront)/2;
            y=display_get_gui_height()-sprite_get_height(spr_cardFront)/4-0.2*sprite_get_height(spr_cardFront)*hover;
        }
    }
    
    //Comprobar si esta el raton por encima
    
    if(collision_point(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),id,true,false)){
        hover=1;
    }
    else{
        hover=0;
    }
    
    //Actualizar el depth
    
    depth=-ds_list_find_index(owner.mano,id);
}


/*

if(cardHover==-1){
x=display_get_gui_width()*(((ds_list_find_index(obj_game.players[obj_game.player].mano,id))+6)*(1/(ds_list_size(obj_game.players[obj_game.player].mano)+11)));
y=display_get_gui_height()-sprite_get_height(spr_cardFront)/4-0.2*sprite_get_height(spr_cardFront)*hover;
}
else{
    var a=ds_list_find_index(obj_game.players[obj_game.player].mano,id);
    var b=ds_list_find_index(obj_game.players[obj_game.player].mano,cardHover);
    if(a&lt;b){
        x=display_get_gui_width()*(((ds_list_find_index(obj_game.players[obj_game.player].mano,id))+6)*(1/(ds_list_size(obj_game.players[obj_game.player].mano)+11)))-sprite_get_width(spr_cardFront)/2;
        y=display_get_gui_height()-sprite_get_height(spr_cardFront)/4-0.2*sprite_get_height(spr_cardFront)*hover;
    }
    else if(a=b){
        x=display_get_gui_width()*(((ds_list_find_index(obj_game.players[obj_game.player].mano,id))+6)*(1/(ds_list_size(obj_game.players[obj_game.player].mano)+11)));
        y=display_get_gui_height()-sprite_get_height(spr_cardFront)/4-0.2*sprite_get_height(spr_cardFront)*hover;
    }
    else{
        x=display_get_gui_width()*(((ds_list_find_index(obj_game.players[obj_game.player].mano,id))+6)*(1/(ds_list_size(obj_game.players[obj_game.player].mano)+11)))+sprite_get_width(spr_cardFront)/2;
        y=display_get_gui_height()-sprite_get_height(spr_cardFront)/4-0.2*sprite_get_height(spr_cardFront)*hover;
    }
}

//Comprobar si esta el raton por encima

if(collision_point(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),id,true,false)){
    hover=1;
}
else{
    hover=0;
}

//Actualizar el depth

depth=-ds_list_find_index(obj_game.players[obj_game.player].mano,id);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite(spr_cardFront,selected,x,y);
draw_text_transformed(x,y-55,cardName,0.8,0.8,0);
draw_text_transformed(x,y,owner,0.225,0.225,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
