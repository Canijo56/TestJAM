<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>numPlayers = 2;
player = 0;
for (var i = 0; i &lt; numPlayers; i++){
    players[i] = -1;
}
for (var i = 0; i &lt; numPlayers; i++){
    players[i] = instance_create(0, 0, obj_player);
    players[i].alarm[2] = 1;
    players[i].alarm[0] = 2;
}




faseTurno = 0;
turno = 0;
ronda = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player = (player + 1) % numPlayers;
turno++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Seleccionar / Colocar
    
with (players[player]){

    
    // Checkeamos si estamos haciendo click sobre la carta
    
    if(mouse_check_button_pressed(mb_left)){
        
    
        //Guardamos id de colision con carta y con hexagon
        
        var card = scr_minDepth(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),obj_card);
        var hex = scr_minDepth(mouse_x,mouse_y,obj_hexagon);
    
        //Reinicializamos los estados de las cartas
        
        with(obj_card){
            selected = 0;
        }
        with(obj_cardUnit){
            selected = 0;
        }
        
         
        //Si el objeto más cercano al ratón es una CARTA, la seleccionamos.
        
        if(card&gt;0){
            //Apagamos todas las casillas
            obj_hexagon.highlighted = 0;    
            //Si estamos seleccionando la ya seleccionada, la deseleccionamos 
            if(cardSelected==card){
                cardSelected=-1;
            }
            //Si no, la seleccionamos
            else{
                cardSelected=card;
                card.selected=1;
            }
            unitSelected=-1;
        }
        
        //Si es un hexagono:
            
        else if(hex&gt;0){
            
            
            // Si hay un hexagono highlighted y una unidad seleccionada
            if (hex.highlighted&gt;0 &amp;&amp; unitSelected!=-1){
                // y el hexagono esta libre
                if (hex.cardId == -1){
                    scr_moveUnit(unitSelected, hex); 
                }
                // o el hexagono tiene una unidad
                else{
                    scr_attackUnit(unitSelected, hex.cardId);
                }
                obj_hexagon.highlighted = 0;
                unitSelected=-1;
            }
            
            // Si hay un hexagono vacio y hay una carta seleccionada
            
            else if (hex.cardId==-1 &amp;&amp; cardSelected!=-1){ 
                obj_hexagon.highlighted = 0;
                scr_colocarCarta(cardSelected); 
                cardSelected=-1;           
            }  
            
                    // Si el hexagono no esta vacio
            else{
                obj_hexagon.highlighted = 0;
                    // Seleccionamos la unidad mas cercana
                if(collision_point(mouse_x,mouse_y,obj_cardUnit,false,false)){
                    var unit = instance_nearest(mouse_x, mouse_y, obj_cardUnit);
                    //Si esta seleccionado la deseleccionamos
                    if(unitSelected==unit){
                        unitSelected=-1;
                    }
                    //Si no, la seleccionamos
                    else{
                        unit.selected = 1;
                        unitSelected=unit;
                        unit.alarm[0] = 1;
                    }
                    cardSelected=-1;
                }
                else{
                    unitSelected=-1;
                }
            }   
        }
        //Si no estamos haciendo click ni en cartas ni en escenario, deseleccionamos todo
        else{
            cardSelected=-1;
            unitSelected=-1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turno

switch (faseTurno){
    case 0:
        with(players[player]){
            alarm[1]= 1;
            scr_robar();
        }    
        faseTurno++;
        break;
    case 1:
        with(players[player]){
        
        }
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var debug = "Turno " + string_format(turno, 2, 0);
draw_set_font(fnt_debug)
draw_text(500,500, debug);

 debug = "Fase de Turno " + string_format(faseTurno, 2, 0);
draw_set_font(fnt_debug)
draw_text(500,600, debug);

 debug = "Player " + string_format(player, 2, 0);
draw_set_font(fnt_debug)
draw_text(500,700, debug);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="84">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
