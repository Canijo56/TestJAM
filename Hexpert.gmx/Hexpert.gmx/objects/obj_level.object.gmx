<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_level</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("obj_level_create inicio ----------------------------------------------");

// dimension de la hexgrid (m)
m = 8;



// numero de casillas
var n = 3*m *(m+1) + 1;

    debug = "Numero de Casillas = [" + string_format(n,3,3) + "]";
    show_debug_message(debug);

// creacion de tablero

var pixelPos, hexPos, matriz;
for (var i = 0; i &lt; n; i += 1){

        debug = "INDEX = [" + string_format(i,3,3) + "]";
        show_debug_message(debug);

    hexPos = scr_index2coord(i);
    
        debug = "HexPos = [" + string_format(hexPos[0],3,3) + "," + string_format(hexPos[1],3,3) + "]";
        show_debug_message(debug);
    
    pixelPos = scr_coord2pixel(hexPos[0], hexPos[1]);
    
        debug = "pixelPos = [" + string_format(pixelPos[0],3,3) + "," + string_format(pixelPos[1],3,3) + "]";
        show_debug_message(debug);
    
    matriz[i] = instance_create(pixelPos[0], pixelPos[1],obj_hexagon);
    
    with (matriz[i]){
        Xhex = hexPos[0];
        Yhex = hexPos[1];
    }

}

// Create player

//player = instance_create(0,0,obj_player);

// Creamos el objeto GAME

game = instance_create(0, 0, obj_game);


show_debug_message("obj_level_create final------------------------------------------------");

//Escalar la vista y centrar la vista .
view_hview[0] = (2*m + 3)*(sqrt(3)/2)*sprite_get_height(obj_hexagon);
view_wview[0] = view_hview[0]*(display_get_width()/display_get_height());

view_xview[0] = -view_wview[0]/2;
view_yview[0] = -view_hview[0]/2;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Desplazamiento y zoom

//Mover el mapa si el raton se acerca a los bordes

var filas=2*m+1;

var wHex=sprite_get_width(spr_hexagon);
var hHex=sprite_get_height(spr_hexagon);
var ratio = display_get_width() / display_get_height();

if(mouse_x&gt;view_xview[0]+view_wview[0]-(1/15)*view_wview[0]){
    view_xview[0]=clamp(view_xview[0]+view_wview[0]/45,- m*wHex - 4*hHex*ratio, - m*wHex - 4*hHex*ratio + ratio*hHex*(filas+2)*sqrt(3)/2 - view_wview[0]);
}
else if(mouse_x&lt;view_xview[0]+(1/15)*view_wview[0]){
    view_xview[0]=clamp(view_xview[0]-view_wview[0]/45,- m*wHex - 4*hHex*ratio, - m*wHex - 4*hHex*ratio + ratio*hHex*(filas+2)*sqrt(3)/2 - view_wview[0]);
}
if(mouse_y&gt;view_yview[0]+view_hview[0]-(1/15)*view_hview[0]){
    view_yview[0]=clamp(view_yview[0]+view_wview[0]/45,- hHex*(filas+2)*sqrt(3)/4,hHex*(filas+2)*sqrt(3)/4 - view_hview[0]);
}
else if(mouse_y&lt;view_yview[0]+(1/15)*view_hview[0]){
    view_yview[0]=clamp(view_yview[0]-view_wview[0]/45,- hHex*(filas+2)*sqrt(3)/4,hHex*(filas+2)*sqrt(3)/4 - view_hview[0]);
}

//Acercarse o alejarse haciendo scroll con el raton
// avergiuar el desfase entre el raton y la esquina superior izq del vviewiew
var _mouse_x=(mouse_x-view_xview[0])/view_wview[0];
var _mouse_y=(mouse_y-view_yview[0])/view_hview[0];
//var xpantMax=

if(mouse_wheel_down()){    // alejarse

  
    view_hview[0]=clamp(view_hview[0]*(10/9),hHex*(4),hHex*(filas+2)*sqrt(3)/2);
    view_wview[0]=view_hview[0] *ratio;

    // ajuste de la posicion de la pantalla para encajar con el mouse
    view_xview[0]=clamp(mouse_x-view_wview[0]*_mouse_x, - m*wHex - 4*hHex*ratio, - m*wHex - 4*hHex*ratio + ratio*hHex*(filas+2)*sqrt(3)/2 - view_wview[0]);
    view_yview[0]=clamp(mouse_y-view_hview[0]*_mouse_y, - hHex*(filas+2)*sqrt(3)/4, hHex*(filas+2)*sqrt(3)/4 - view_hview[0]);
}

else if(mouse_wheel_up()){  // acercarse

    view_hview[0]=clamp(view_hview[0]*(9/10),hHex*(4),hHex*(filas+2)*sqrt(3)/2);
    view_wview[0]=view_hview[0]*ratio;
    
    view_xview[0]=clamp(mouse_x-view_wview[0]*_mouse_x, - m*wHex - 4*hHex*ratio, - m*wHex - 4*hHex*ratio + ratio*hHex*(filas+2)*sqrt(3)/2 - view_wview[0]);
    view_yview=clamp(mouse_y-view_hview[0]*_mouse_y,- hHex*(filas+2)*sqrt(3)/4,hHex*(filas+2)*sqrt(3)/4 - view_hview[0]);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
